
ECU_1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000004d0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000a  00800060  000004d0  00000564  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  0080006a  0080006a  0000056e  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  00000570  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000097  00000000  00000000  00000c3c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  00000cd3  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000218  00000000  00000000  00000d02  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001d6d  00000000  00000000  00000f1a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000833  00000000  00000000  00002c87  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000666  00000000  00000000  000034ba  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000004cc  00000000  00000000  00003b20  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000d10  00000000  00000000  00003fec  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000010c9  00000000  00000000  00004cfc  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000001c0  00000000  00000000  00005dc5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 ed       	ldi	r30, 0xD0	; 208
  68:	f4 e0       	ldi	r31, 0x04	; 4
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	aa 36       	cpi	r26, 0x6A	; 106
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	aa e6       	ldi	r26, 0x6A	; 106
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ab 36       	cpi	r26, 0x6B	; 107
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 49 00 	call	0x92	; 0x92 <main>
  8a:	0c 94 66 02 	jmp	0x4cc	; 0x4cc <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:
#include "pushButton.h"
#include "timers.h"
#include "USART.h"

int main(void)
{
  92:	cf 93       	push	r28
  94:	df 93       	push	r29
  96:	cd b7       	in	r28, 0x3d	; 61
  98:	de b7       	in	r29, 0x3e	; 62
  9a:	29 97       	sbiw	r28, 0x09	; 9
  9c:	0f b6       	in	r0, 0x3f	; 63
  9e:	f8 94       	cli
  a0:	de bf       	out	0x3e, r29	; 62
  a2:	0f be       	out	0x3f, r0	; 63
  a4:	cd bf       	out	0x3d, r28	; 61
	char Speed=0x01;
	
	USART_Config ST_Config={USART_BAUDRATE,TX_ENABLE,RX_ENABLE,NO_DOUBLE_SPEED,DATA_SIZE_8,PARITY_DISABLE,STOP_1BIT,ASYNCH};
  a6:	89 e0       	ldi	r24, 0x09	; 9
  a8:	e1 e6       	ldi	r30, 0x61	; 97
  aa:	f0 e0       	ldi	r31, 0x00	; 0
  ac:	de 01       	movw	r26, r28
  ae:	11 96       	adiw	r26, 0x01	; 1
  b0:	01 90       	ld	r0, Z+
  b2:	0d 92       	st	X+, r0
  b4:	8a 95       	dec	r24
  b6:	e1 f7       	brne	.-8      	; 0xb0 <main+0x1e>
	
	pushButtonInit(BTN_0);
  b8:	80 e0       	ldi	r24, 0x00	; 0
  ba:	0e 94 ee 00 	call	0x1dc	; 0x1dc <pushButtonInit>
	pushButtonInit(BTN_1);
  be:	81 e0       	ldi	r24, 0x01	; 1
  c0:	0e 94 ee 00 	call	0x1dc	; 0x1dc <pushButtonInit>
	
	USART_init(&ST_Config);
  c4:	ce 01       	movw	r24, r28
  c6:	01 96       	adiw	r24, 0x01	; 1
  c8:	0e 94 45 02 	call	0x48a	; 0x48a <USART_init>
	timer0Init(T0_NORMAL_MODE,T0_OC0_DIS,T0_PRESCALER_64, 0, 0, T0_INTERRUPT_NORMAL);
  cc:	ee 24       	eor	r14, r14
  ce:	e3 94       	inc	r14
  d0:	00 e0       	ldi	r16, 0x00	; 0
  d2:	20 e0       	ldi	r18, 0x00	; 0
  d4:	43 e0       	ldi	r20, 0x03	; 3
  d6:	60 e0       	ldi	r22, 0x00	; 0
  d8:	80 e0       	ldi	r24, 0x00	; 0
  da:	0e 94 ce 01 	call	0x39c	; 0x39c <timer0Init>
	SPI_Init_(Interrupt_Enable,SPI_Enable,LSB,Master,Leading_Edge_Rising,Leading_Edge_Sample,Frequency_16);
  de:	cc 24       	eor	r12, r12
  e0:	c3 94       	inc	r12
  e2:	e1 2c       	mov	r14, r1
  e4:	20 e1       	ldi	r18, 0x10	; 16
  e6:	40 e2       	ldi	r20, 0x20	; 32
  e8:	60 e4       	ldi	r22, 0x40	; 64
  ea:	80 e8       	ldi	r24, 0x80	; 128
  ec:	0e 94 89 01 	call	0x312	; 0x312 <SPI_Init_>
	
	Speed = UART_recieveByte();
  f0:	0e 94 62 02 	call	0x4c4	; 0x4c4 <UART_recieveByte>
  f4:	18 2f       	mov	r17, r24
	while(1)
	{
		timer0DelayMs(100);
  f6:	84 e6       	ldi	r24, 0x64	; 100
  f8:	90 e0       	ldi	r25, 0x00	; 0
  fa:	0e 94 ef 01 	call	0x3de	; 0x3de <timer0DelayMs>
				if( Prepressed== pushButtonGetStatus(BTN_0))
  fe:	80 e0       	ldi	r24, 0x00	; 0
 100:	0e 94 0e 01 	call	0x21c	; 0x21c <pushButtonGetStatus>
 104:	81 30       	cpi	r24, 0x01	; 1
 106:	41 f4       	brne	.+16     	; 0x118 <main+0x86>
				{
					if (Speed<10)
 108:	1a 30       	cpi	r17, 0x0A	; 10
 10a:	08 f4       	brcc	.+2      	; 0x10e <main+0x7c>
					{Speed++;
 10c:	1f 5f       	subi	r17, 0xFF	; 255
					}
					while(Prepressed== pushButtonGetStatus(BTN_0));					
 10e:	80 e0       	ldi	r24, 0x00	; 0
 110:	0e 94 0e 01 	call	0x21c	; 0x21c <pushButtonGetStatus>
 114:	81 30       	cpi	r24, 0x01	; 1
 116:	d9 f3       	breq	.-10     	; 0x10e <main+0x7c>
				}
				if( Prepressed== pushButtonGetStatus(BTN_1))
 118:	81 e0       	ldi	r24, 0x01	; 1
 11a:	0e 94 0e 01 	call	0x21c	; 0x21c <pushButtonGetStatus>
 11e:	81 30       	cpi	r24, 0x01	; 1
 120:	39 f4       	brne	.+14     	; 0x130 <main+0x9e>
				{
					if (Speed>0)
 122:	11 11       	cpse	r17, r1
					{Speed--;
 124:	11 50       	subi	r17, 0x01	; 1
					}
					while(Prepressed== pushButtonGetStatus(BTN_1));	
 126:	81 e0       	ldi	r24, 0x01	; 1
 128:	0e 94 0e 01 	call	0x21c	; 0x21c <pushButtonGetStatus>
 12c:	81 30       	cpi	r24, 0x01	; 1
 12e:	d9 f3       	breq	.-10     	; 0x126 <main+0x94>
				}	
		SPI_Send_(Speed);	
 130:	81 2f       	mov	r24, r17
 132:	0e 94 ca 01 	call	0x394	; 0x394 <SPI_Send_>
	}
 136:	df cf       	rjmp	.-66     	; 0xf6 <main+0x64>

00000138 <gpioPinDirection>:
 * 				- 0x00 -> Input
 * 				- 0xff -> Output
 */
void gpioPinDirection(uint8_t u8_port, uint8_t u8_pins, uint8_t u8_direction)
{
		switch (u8_port)
 138:	81 30       	cpi	r24, 0x01	; 1
 13a:	81 f0       	breq	.+32     	; 0x15c <gpioPinDirection+0x24>
 13c:	28 f0       	brcs	.+10     	; 0x148 <gpioPinDirection+0x10>
 13e:	82 30       	cpi	r24, 0x02	; 2
 140:	b9 f0       	breq	.+46     	; 0x170 <gpioPinDirection+0x38>
 142:	83 30       	cpi	r24, 0x03	; 3
 144:	41 f5       	brne	.+80     	; 0x196 <gpioPinDirection+0x5e>
 146:	1e c0       	rjmp	.+60     	; 0x184 <gpioPinDirection+0x4c>
		{
			case 0:
			PORTA_DIR = PORTA_DIR & (~u8_pins);
 148:	8a b3       	in	r24, 0x1a	; 26
 14a:	96 2f       	mov	r25, r22
 14c:	90 95       	com	r25
 14e:	89 23       	and	r24, r25
 150:	8a bb       	out	0x1a, r24	; 26
			PORTA_DIR = PORTA_DIR |(u8_pins & u8_direction);
 152:	8a b3       	in	r24, 0x1a	; 26
 154:	64 23       	and	r22, r20
 156:	68 2b       	or	r22, r24
 158:	6a bb       	out	0x1a, r22	; 26
			break;
 15a:	08 95       	ret
			case 1:
			PORTB_DIR = PORTB_DIR & (~u8_pins);
 15c:	87 b3       	in	r24, 0x17	; 23
 15e:	96 2f       	mov	r25, r22
 160:	90 95       	com	r25
 162:	89 23       	and	r24, r25
 164:	87 bb       	out	0x17, r24	; 23
			PORTB_DIR = PORTB_DIR |(u8_pins & u8_direction);
 166:	87 b3       	in	r24, 0x17	; 23
 168:	64 23       	and	r22, r20
 16a:	68 2b       	or	r22, r24
 16c:	67 bb       	out	0x17, r22	; 23
			break;
 16e:	08 95       	ret
			case 2:
			PORTC_DIR = PORTC_DIR & (~u8_pins);
 170:	84 b3       	in	r24, 0x14	; 20
 172:	96 2f       	mov	r25, r22
 174:	90 95       	com	r25
 176:	89 23       	and	r24, r25
 178:	84 bb       	out	0x14, r24	; 20
			PORTC_DIR = PORTC_DIR |(u8_pins & u8_direction);
 17a:	84 b3       	in	r24, 0x14	; 20
 17c:	64 23       	and	r22, r20
 17e:	68 2b       	or	r22, r24
 180:	64 bb       	out	0x14, r22	; 20
			break;
 182:	08 95       	ret
			case 3:
			PORTD_DIR = PORTD_DIR & (~u8_pins);
 184:	81 b3       	in	r24, 0x11	; 17
 186:	96 2f       	mov	r25, r22
 188:	90 95       	com	r25
 18a:	89 23       	and	r24, r25
 18c:	81 bb       	out	0x11, r24	; 17
			PORTD_DIR = PORTD_DIR |(u8_pins & u8_direction);
 18e:	81 b3       	in	r24, 0x11	; 17
 190:	64 23       	and	r22, r20
 192:	68 2b       	or	r22, r24
 194:	61 bb       	out	0x11, r22	; 17
 196:	08 95       	ret

00000198 <gpioPinRead>:
 * @return
 */
uint8_t gpioPinRead(uint8_t u8_port, uint8_t u8_pin)
{
	
					switch (u8_port)
 198:	81 30       	cpi	r24, 0x01	; 1
 19a:	61 f0       	breq	.+24     	; 0x1b4 <gpioPinRead+0x1c>
 19c:	28 f0       	brcs	.+10     	; 0x1a8 <gpioPinRead+0x10>
 19e:	82 30       	cpi	r24, 0x02	; 2
 1a0:	79 f0       	breq	.+30     	; 0x1c0 <gpioPinRead+0x28>
 1a2:	83 30       	cpi	r24, 0x03	; 3
 1a4:	c9 f4       	brne	.+50     	; 0x1d8 <gpioPinRead+0x40>
 1a6:	12 c0       	rjmp	.+36     	; 0x1cc <gpioPinRead+0x34>
					{
						case 0:
						if(PORTA_PIN &u8_pin)
 1a8:	89 b3       	in	r24, 0x19	; 25
 1aa:	68 23       	and	r22, r24
 1ac:	81 e0       	ldi	r24, 0x01	; 1
 1ae:	a9 f4       	brne	.+42     	; 0x1da <gpioPinRead+0x42>
 1b0:	80 e0       	ldi	r24, 0x00	; 0
 1b2:	08 95       	ret
						return 1;
						else
						return 0;
						break;
						case 1:
						if(PORTB_PIN &u8_pin)
 1b4:	86 b3       	in	r24, 0x16	; 22
 1b6:	68 23       	and	r22, r24
 1b8:	81 e0       	ldi	r24, 0x01	; 1
 1ba:	79 f4       	brne	.+30     	; 0x1da <gpioPinRead+0x42>
 1bc:	80 e0       	ldi	r24, 0x00	; 0
 1be:	08 95       	ret
						return 1;
						else
						return 0;
						break;
						case 2:
						if(PORTC_PIN &u8_pin)
 1c0:	83 b3       	in	r24, 0x13	; 19
 1c2:	68 23       	and	r22, r24
 1c4:	81 e0       	ldi	r24, 0x01	; 1
 1c6:	49 f4       	brne	.+18     	; 0x1da <gpioPinRead+0x42>
 1c8:	80 e0       	ldi	r24, 0x00	; 0
 1ca:	08 95       	ret
						return 1;
						else
						return 0;
						break;
						case 3:
						if(PORTD_PIN &u8_pin)
 1cc:	80 b3       	in	r24, 0x10	; 16
 1ce:	68 23       	and	r22, r24
 1d0:	81 e0       	ldi	r24, 0x01	; 1
 1d2:	19 f4       	brne	.+6      	; 0x1da <gpioPinRead+0x42>
 1d4:	80 e0       	ldi	r24, 0x00	; 0
 1d6:	08 95       	ret
						return 1;
						else
						return 0;
						break;
						default:
						return 0;
 1d8:	80 e0       	ldi	r24, 0x00	; 0
						break;
					}

	
}
 1da:	08 95       	ret

000001dc <pushButtonInit>:
 * 				  one of the enum (En_buttonId) parameters
 *
 */
void pushButtonInit(En_buttonId_t en_butotn_id)
{
			switch (en_butotn_id)
 1dc:	81 30       	cpi	r24, 0x01	; 1
 1de:	61 f0       	breq	.+24     	; 0x1f8 <pushButtonInit+0x1c>
 1e0:	28 f0       	brcs	.+10     	; 0x1ec <pushButtonInit+0x10>
 1e2:	82 30       	cpi	r24, 0x02	; 2
 1e4:	79 f0       	breq	.+30     	; 0x204 <pushButtonInit+0x28>
 1e6:	83 30       	cpi	r24, 0x03	; 3
 1e8:	c1 f4       	brne	.+48     	; 0x21a <pushButtonInit+0x3e>
 1ea:	12 c0       	rjmp	.+36     	; 0x210 <pushButtonInit+0x34>
			{
				case BTN_0:
				gpioPinDirection(BTN_0_GPIO, BTN_0_BIT, INPUT);
 1ec:	40 e0       	ldi	r20, 0x00	; 0
 1ee:	60 e1       	ldi	r22, 0x10	; 16
 1f0:	82 e0       	ldi	r24, 0x02	; 2
 1f2:	0e 94 9c 00 	call	0x138	; 0x138 <gpioPinDirection>
				//gpioPinWrite(GPIOC, BIT4, HIGH);				
				break;
 1f6:	08 95       	ret
				case BTN_1:
				gpioPinDirection(BTN_1_GPIO, BTN_1_BIT, INPUT);
 1f8:	40 e0       	ldi	r20, 0x00	; 0
 1fa:	64 e0       	ldi	r22, 0x04	; 4
 1fc:	81 e0       	ldi	r24, 0x01	; 1
 1fe:	0e 94 9c 00 	call	0x138	; 0x138 <gpioPinDirection>
				//gpioPinWrite(GPIOB, BIT2, HIGH);
				break;
 202:	08 95       	ret
				case BTN_2:
				gpioPinDirection(BTN_2_GPIO, BTN_2_BIT, INPUT);
 204:	40 e0       	ldi	r20, 0x00	; 0
 206:	64 e0       	ldi	r22, 0x04	; 4
 208:	80 e0       	ldi	r24, 0x00	; 0
 20a:	0e 94 9c 00 	call	0x138	; 0x138 <gpioPinDirection>
				//gpioPinWrite(GPIOA, BIT2, HIGH);
				break;
 20e:	08 95       	ret
				case BTN_3:
				gpioPinDirection(BTN_3_GPIO, BTN_3_BIT, INPUT);
 210:	40 e0       	ldi	r20, 0x00	; 0
 212:	68 e0       	ldi	r22, 0x08	; 8
 214:	80 e0       	ldi	r24, 0x00	; 0
 216:	0e 94 9c 00 	call	0x138	; 0x138 <gpioPinDirection>
 21a:	08 95       	ret

0000021c <pushButtonGetStatus>:
 * Description: read BTN_x (where x 0, 1, 2, 3) state which is stored in the program
 * 				in the update function
 *
 */
En_buttonStatus_t pushButtonGetStatus(En_buttonId_t en_butotn_id)
{
 21c:	cf 93       	push	r28
 21e:	c8 2f       	mov	r28, r24
	        softwareDelayMs(50);
 220:	62 e3       	ldi	r22, 0x32	; 50
 222:	70 e0       	ldi	r23, 0x00	; 0
 224:	80 e0       	ldi	r24, 0x00	; 0
 226:	90 e0       	ldi	r25, 0x00	; 0
 228:	0e 94 35 01 	call	0x26a	; 0x26a <softwareDelayMs>
	
				switch (en_butotn_id)
 22c:	c1 30       	cpi	r28, 0x01	; 1
 22e:	59 f0       	breq	.+22     	; 0x246 <pushButtonGetStatus+0x2a>
 230:	28 f0       	brcs	.+10     	; 0x23c <pushButtonGetStatus+0x20>
 232:	c2 30       	cpi	r28, 0x02	; 2
 234:	69 f0       	breq	.+26     	; 0x250 <pushButtonGetStatus+0x34>
 236:	c3 30       	cpi	r28, 0x03	; 3
 238:	a9 f4       	brne	.+42     	; 0x264 <pushButtonGetStatus+0x48>
 23a:	0f c0       	rjmp	.+30     	; 0x25a <pushButtonGetStatus+0x3e>
				{
					case BTN_0:
					return (gpioPinRead(BTN_0_GPIO, BTN_0_BIT));
 23c:	60 e1       	ldi	r22, 0x10	; 16
 23e:	82 e0       	ldi	r24, 0x02	; 2
 240:	0e 94 cc 00 	call	0x198	; 0x198 <gpioPinRead>
 244:	10 c0       	rjmp	.+32     	; 0x266 <pushButtonGetStatus+0x4a>
					break;
					case BTN_1:
					return (gpioPinRead(BTN_1_GPIO, BTN_1_BIT));
 246:	64 e0       	ldi	r22, 0x04	; 4
 248:	81 e0       	ldi	r24, 0x01	; 1
 24a:	0e 94 cc 00 	call	0x198	; 0x198 <gpioPinRead>
 24e:	0b c0       	rjmp	.+22     	; 0x266 <pushButtonGetStatus+0x4a>
					break;
					case BTN_2:
					return (gpioPinRead(BTN_2_GPIO, BTN_2_BIT));
 250:	64 e0       	ldi	r22, 0x04	; 4
 252:	80 e0       	ldi	r24, 0x00	; 0
 254:	0e 94 cc 00 	call	0x198	; 0x198 <gpioPinRead>
 258:	06 c0       	rjmp	.+12     	; 0x266 <pushButtonGetStatus+0x4a>
					break;
					case BTN_3:
					return (gpioPinRead(BTN_3_GPIO, BTN_3_BIT));
 25a:	68 e0       	ldi	r22, 0x08	; 8
 25c:	80 e0       	ldi	r24, 0x00	; 0
 25e:	0e 94 cc 00 	call	0x198	; 0x198 <gpioPinRead>
 262:	01 c0       	rjmp	.+2      	; 0x266 <pushButtonGetStatus+0x4a>
					break;
					default:
					return 0;
 264:	80 e0       	ldi	r24, 0x00	; 0
					break;
				}

	
}
 266:	cf 91       	pop	r28
 268:	08 95       	ret

0000026a <softwareDelayMs>:
 */ 

#include "softwareDelay.h "

void softwareDelayMs(uint32_t u32_delay_in_ms)
{
 26a:	8f 92       	push	r8
 26c:	9f 92       	push	r9
 26e:	af 92       	push	r10
 270:	bf 92       	push	r11
 272:	ef 92       	push	r14
 274:	ff 92       	push	r15
 276:	0f 93       	push	r16
 278:	1f 93       	push	r17
 27a:	cf 93       	push	r28
 27c:	df 93       	push	r29
 27e:	00 d0       	rcall	.+0      	; 0x280 <softwareDelayMs+0x16>
 280:	00 d0       	rcall	.+0      	; 0x282 <softwareDelayMs+0x18>
 282:	cd b7       	in	r28, 0x3d	; 61
 284:	de b7       	in	r29, 0x3e	; 62
		volatile uint32_t d=0;
 286:	19 82       	std	Y+1, r1	; 0x01
 288:	1a 82       	std	Y+2, r1	; 0x02
 28a:	1b 82       	std	Y+3, r1	; 0x03
 28c:	1c 82       	std	Y+4, r1	; 0x04
		for(int y=0;y<u32_delay_in_ms;y++)
 28e:	61 15       	cp	r22, r1
 290:	71 05       	cpc	r23, r1
 292:	81 05       	cpc	r24, r1
 294:	91 05       	cpc	r25, r1
 296:	19 f5       	brne	.+70     	; 0x2de <softwareDelayMs+0x74>
 298:	2d c0       	rjmp	.+90     	; 0x2f4 <softwareDelayMs+0x8a>
		{			
			for(int z=0;z<19;z++)
			{
				for(int w=0;w<16;w++)
				{
					d++;					
 29a:	89 80       	ldd	r8, Y+1	; 0x01
 29c:	9a 80       	ldd	r9, Y+2	; 0x02
 29e:	ab 80       	ldd	r10, Y+3	; 0x03
 2a0:	bc 80       	ldd	r11, Y+4	; 0x04
 2a2:	af ef       	ldi	r26, 0xFF	; 255
 2a4:	8a 1a       	sub	r8, r26
 2a6:	9a 0a       	sbc	r9, r26
 2a8:	aa 0a       	sbc	r10, r26
 2aa:	ba 0a       	sbc	r11, r26
 2ac:	89 82       	std	Y+1, r8	; 0x01
 2ae:	9a 82       	std	Y+2, r9	; 0x02
 2b0:	ab 82       	std	Y+3, r10	; 0x03
 2b2:	bc 82       	std	Y+4, r11	; 0x04
 2b4:	21 50       	subi	r18, 0x01	; 1
 2b6:	31 09       	sbc	r19, r1
		volatile uint32_t d=0;
		for(int y=0;y<u32_delay_in_ms;y++)
		{			
			for(int z=0;z<19;z++)
			{
				for(int w=0;w<16;w++)
 2b8:	81 f7       	brne	.-32     	; 0x29a <softwareDelayMs+0x30>
 2ba:	41 50       	subi	r20, 0x01	; 1
 2bc:	51 09       	sbc	r21, r1
void softwareDelayMs(uint32_t u32_delay_in_ms)
{
		volatile uint32_t d=0;
		for(int y=0;y<u32_delay_in_ms;y++)
		{			
			for(int z=0;z<19;z++)
 2be:	11 f0       	breq	.+4      	; 0x2c4 <softwareDelayMs+0x5a>
 */ 

#include "softwareDelay.h "

void softwareDelayMs(uint32_t u32_delay_in_ms)
{
 2c0:	9f 01       	movw	r18, r30
 2c2:	eb cf       	rjmp	.-42     	; 0x29a <softwareDelayMs+0x30>
		volatile uint32_t d=0;
		for(int y=0;y<u32_delay_in_ms;y++)
 2c4:	0f 5f       	subi	r16, 0xFF	; 255
 2c6:	1f 4f       	sbci	r17, 0xFF	; 255
 2c8:	48 01       	movw	r8, r16
 2ca:	aa 24       	eor	r10, r10
 2cc:	97 fc       	sbrc	r9, 7
 2ce:	a0 94       	com	r10
 2d0:	ba 2c       	mov	r11, r10
 2d2:	86 16       	cp	r8, r22
 2d4:	97 06       	cpc	r9, r23
 2d6:	a8 06       	cpc	r10, r24
 2d8:	b9 06       	cpc	r11, r25
 2da:	50 f0       	brcs	.+20     	; 0x2f0 <softwareDelayMs+0x86>
 2dc:	0b c0       	rjmp	.+22     	; 0x2f4 <softwareDelayMs+0x8a>
 2de:	00 e0       	ldi	r16, 0x00	; 0
 2e0:	10 e0       	ldi	r17, 0x00	; 0
 */ 

#include "softwareDelay.h "

void softwareDelayMs(uint32_t u32_delay_in_ms)
{
 2e2:	0f 2e       	mov	r0, r31
 2e4:	f3 e1       	ldi	r31, 0x13	; 19
 2e6:	ef 2e       	mov	r14, r31
 2e8:	f1 2c       	mov	r15, r1
 2ea:	f0 2d       	mov	r31, r0
 2ec:	e0 e1       	ldi	r30, 0x10	; 16
 2ee:	f0 e0       	ldi	r31, 0x00	; 0
 2f0:	a7 01       	movw	r20, r14
 2f2:	e6 cf       	rjmp	.-52     	; 0x2c0 <softwareDelayMs+0x56>
			}
		}
		
	
	
}
 2f4:	0f 90       	pop	r0
 2f6:	0f 90       	pop	r0
 2f8:	0f 90       	pop	r0
 2fa:	0f 90       	pop	r0
 2fc:	df 91       	pop	r29
 2fe:	cf 91       	pop	r28
 300:	1f 91       	pop	r17
 302:	0f 91       	pop	r16
 304:	ff 90       	pop	r15
 306:	ef 90       	pop	r14
 308:	bf 90       	pop	r11
 30a:	af 90       	pop	r10
 30c:	9f 90       	pop	r9
 30e:	8f 90       	pop	r8
 310:	08 95       	ret

00000312 <SPI_Init_>:

#include "SPI_.h"


void SPI_Init_(Interrupt_State interrupt_state,SPI_En_State SPI_state , Data_Order data_order ,SPI_Mode SPI_mode ,Clock_Polarity clock_Polarity ,Clock_Phase clock_phase , SPI_Clock_Rate clock_rate)
{
 312:	cf 92       	push	r12
 314:	ef 92       	push	r14
 316:	0f 93       	push	r16
 318:	cf 93       	push	r28
 31a:	c6 2f       	mov	r28, r22
	//SPCR =0b00110001;
	SPCR = SPCR|(interrupt_state | data_order | SPI_mode | clock_Polarity | clock_phase | clock_rate);	
 31c:	9d b1       	in	r25, 0x0d	; 13
 31e:	89 2b       	or	r24, r25
 320:	48 2b       	or	r20, r24
 322:	42 2b       	or	r20, r18
 324:	04 2b       	or	r16, r20
 326:	e0 2a       	or	r14, r16
 328:	ce 28       	or	r12, r14
 32a:	cd b8       	out	0x0d, r12	; 13
	//Bit 4  MSTR: Master/Slave Select   1:Master 0:slave
	//Bit 3  CPOL: Clock Polarity
	//Bit 2  CPHA: Clock Phase
	//Bits 1, 0  SPR1, SPR0: SPI Clock Rate Select 1 and 0
	
	 SPSR =0x00; //disable Double SPI Speed Bit
 32c:	1e b8       	out	0x0e, r1	; 14

	if(SPI_mode == Master)
 32e:	20 31       	cpi	r18, 0x10	; 16
 330:	a9 f4       	brne	.+42     	; 0x35c <SPI_Init_+0x4a>
	{gpioPinDirection(SPI_MOSI_PORT, SPI_MOSI_PIN, OUTPUT);
 332:	4f ef       	ldi	r20, 0xFF	; 255
 334:	60 e2       	ldi	r22, 0x20	; 32
 336:	81 e0       	ldi	r24, 0x01	; 1
 338:	0e 94 9c 00 	call	0x138	; 0x138 <gpioPinDirection>
	 gpioPinDirection(SPI_MISO_PORT, SPI_MISO_PIN, INPUT);	 	
 33c:	40 e0       	ldi	r20, 0x00	; 0
 33e:	60 e4       	ldi	r22, 0x40	; 64
 340:	81 e0       	ldi	r24, 0x01	; 1
 342:	0e 94 9c 00 	call	0x138	; 0x138 <gpioPinDirection>
	 gpioPinDirection(SPI_SCK_PORT, SPI_SCK_PIN, OUTPUT);
 346:	4f ef       	ldi	r20, 0xFF	; 255
 348:	60 e8       	ldi	r22, 0x80	; 128
 34a:	81 e0       	ldi	r24, 0x01	; 1
 34c:	0e 94 9c 00 	call	0x138	; 0x138 <gpioPinDirection>
	 gpioPinDirection(SPI_SS_PORT, SPI_SS_PIN, OUTPUT);	
 350:	4f ef       	ldi	r20, 0xFF	; 255
 352:	60 e1       	ldi	r22, 0x10	; 16
 354:	81 e0       	ldi	r24, 0x01	; 1
 356:	0e 94 9c 00 	call	0x138	; 0x138 <gpioPinDirection>
 35a:	14 c0       	rjmp	.+40     	; 0x384 <SPI_Init_+0x72>
	}else
	{gpioPinDirection(SPI_MOSI_PORT, SPI_MOSI_PIN, INPUT);
 35c:	40 e0       	ldi	r20, 0x00	; 0
 35e:	60 e2       	ldi	r22, 0x20	; 32
 360:	81 e0       	ldi	r24, 0x01	; 1
 362:	0e 94 9c 00 	call	0x138	; 0x138 <gpioPinDirection>
	 gpioPinDirection(SPI_MISO_PORT, SPI_MISO_PIN, OUTPUT);
 366:	4f ef       	ldi	r20, 0xFF	; 255
 368:	60 e4       	ldi	r22, 0x40	; 64
 36a:	81 e0       	ldi	r24, 0x01	; 1
 36c:	0e 94 9c 00 	call	0x138	; 0x138 <gpioPinDirection>
	 gpioPinDirection(SPI_SCK_PORT, SPI_SCK_PIN, INPUT);
 370:	40 e0       	ldi	r20, 0x00	; 0
 372:	60 e8       	ldi	r22, 0x80	; 128
 374:	81 e0       	ldi	r24, 0x01	; 1
 376:	0e 94 9c 00 	call	0x138	; 0x138 <gpioPinDirection>
	 gpioPinDirection(SPI_SS_PORT, SPI_SS_PIN, INPUT);
 37a:	40 e0       	ldi	r20, 0x00	; 0
 37c:	60 e1       	ldi	r22, 0x10	; 16
 37e:	81 e0       	ldi	r24, 0x01	; 1
 380:	0e 94 9c 00 	call	0x138	; 0x138 <gpioPinDirection>
	}
	
	SPCR = SPCR| SPI_state;		
 384:	8d b1       	in	r24, 0x0d	; 13
 386:	c8 2b       	or	r28, r24
 388:	cd b9       	out	0x0d, r28	; 13
}
 38a:	cf 91       	pop	r28
 38c:	0f 91       	pop	r16
 38e:	ef 90       	pop	r14
 390:	cf 90       	pop	r12
 392:	08 95       	ret

00000394 <SPI_Send_>:

void SPI_Send_(char data)
{
	SPDR=data;
 394:	8f b9       	out	0x0f, r24	; 15
	while(!(SPSR& 0x80)); // wait until send complete
 396:	77 9b       	sbis	0x0e, 7	; 14
 398:	fe cf       	rjmp	.-4      	; 0x396 <SPI_Send_+0x2>
	
}
 39a:	08 95       	ret

0000039c <timer0Init>:
 * @param initialValue
 * @param outputCompare
 * @param interruptMask
 */
void timer0Init(En_timer0Mode_t en_mode,En_timer0OC_t en_OC0,En_timer0perscaler_t en_prescal, uint8_t u8_initialValue, uint8_t u8_outputCompare, En_timer0Interrupt_t en_interruptMask)
{
 39c:	ef 92       	push	r14
 39e:	0f 93       	push	r16
	
	TCCR0= TCCR0 | en_mode;
 3a0:	93 b7       	in	r25, 0x33	; 51
 3a2:	98 2b       	or	r25, r24
 3a4:	93 bf       	out	0x33, r25	; 51
	TCCR0= TCCR0 | en_OC0;
 3a6:	93 b7       	in	r25, 0x33	; 51
 3a8:	69 2b       	or	r22, r25
 3aa:	63 bf       	out	0x33, r22	; 51
	TCCR0= TCCR0 | en_prescal;		
 3ac:	93 b7       	in	r25, 0x33	; 51
 3ae:	94 2b       	or	r25, r20
 3b0:	93 bf       	out	0x33, r25	; 51
	
	TIMSK = TIMSK |  en_interruptMask;
 3b2:	99 b7       	in	r25, 0x39	; 57
 3b4:	e9 2a       	or	r14, r25
 3b6:	e9 be       	out	0x39, r14	; 57
	
	TCNT0 = u8_initialValue;
 3b8:	22 bf       	out	0x32, r18	; 50
	
	OCR0 = u8_outputCompare;
 3ba:	0c bf       	out	0x3c, r16	; 60
	
	TIMER0_PRESCALER= en_prescal;
 3bc:	40 93 60 00 	sts	0x0060, r20
	
	TIMER0_MODE= en_mode; 
 3c0:	80 93 6a 00 	sts	0x006A, r24
	
}
 3c4:	0f 91       	pop	r16
 3c6:	ef 90       	pop	r14
 3c8:	08 95       	ret

000003ca <timer0Set>:
 * Description:
 * @param value
 */
void timer0Set(uint8_t u8_value)
{
	TCNT0=u8_value;
 3ca:	82 bf       	out	0x32, r24	; 50
 3cc:	08 95       	ret

000003ce <timer0Start>:
/**
 * Description:
 */
void timer0Start(void)
{
	TCCR0 = TCCR0 | TIMER0_PRESCALER;
 3ce:	93 b7       	in	r25, 0x33	; 51
 3d0:	80 91 60 00 	lds	r24, 0x0060
 3d4:	89 2b       	or	r24, r25
 3d6:	83 bf       	out	0x33, r24	; 51
 3d8:	08 95       	ret

000003da <timer0Stop>:
/**
 * Description:
 */
void timer0Stop(void)
{
	TCCR0 = T0_CLOCK_MASK & T0_NO_CLOCK;
 3da:	13 be       	out	0x33, r1	; 51
 3dc:	08 95       	ret

000003de <timer0DelayMs>:
/**
 * Description:
 * @param delay
 */
void timer0DelayMs(uint16_t u16_delay_in_ms)
{
 3de:	8f 92       	push	r8
 3e0:	9f 92       	push	r9
 3e2:	af 92       	push	r10
 3e4:	bf 92       	push	r11
 3e6:	cf 92       	push	r12
 3e8:	df 92       	push	r13
 3ea:	ef 92       	push	r14
 3ec:	ff 92       	push	r15
 3ee:	4c 01       	movw	r8, r24
	uint32_t index=0;
	uint32_t Number_of_tick_per_ms =0;
	
	Number_of_tick_per_ms= FCPU /(64000) ; //64 * 1000 // prescaler 64
	
	if(TIMER0_MODE == T0_NORMAL_MODE) //
 3f0:	80 91 6a 00 	lds	r24, 0x006A
 3f4:	81 11       	cpse	r24, r1
 3f6:	22 c0       	rjmp	.+68     	; 0x43c <timer0DelayMs+0x5e>
	{
		timer0Start();
 3f8:	0e 94 e7 01 	call	0x3ce	; 0x3ce <timer0Start>
		for(index=0;index<u16_delay_in_ms;index++){
 3fc:	a1 2c       	mov	r10, r1
 3fe:	b1 2c       	mov	r11, r1
 400:	81 14       	cp	r8, r1
 402:	91 04       	cpc	r9, r1
 404:	a1 04       	cpc	r10, r1
 406:	b1 04       	cpc	r11, r1
 408:	b1 f0       	breq	.+44     	; 0x436 <timer0DelayMs+0x58>
 40a:	c1 2c       	mov	r12, r1
 40c:	d1 2c       	mov	r13, r1
 40e:	76 01       	movw	r14, r12
			timer0Set(256 - Number_of_tick_per_ms); // Preload with 6 counts if prescaler 64
 410:	86 e0       	ldi	r24, 0x06	; 6
 412:	0e 94 e5 01 	call	0x3ca	; 0x3ca <timer0Set>
			while(!(TIFR & (1 << 0)));
 416:	08 b6       	in	r0, 0x38	; 56
 418:	00 fe       	sbrs	r0, 0
 41a:	fd cf       	rjmp	.-6      	; 0x416 <timer0DelayMs+0x38>
			TIFR |= (1 << 0);
 41c:	88 b7       	in	r24, 0x38	; 56
 41e:	81 60       	ori	r24, 0x01	; 1
 420:	88 bf       	out	0x38, r24	; 56
	Number_of_tick_per_ms= FCPU /(64000) ; //64 * 1000 // prescaler 64
	
	if(TIMER0_MODE == T0_NORMAL_MODE) //
	{
		timer0Start();
		for(index=0;index<u16_delay_in_ms;index++){
 422:	8f ef       	ldi	r24, 0xFF	; 255
 424:	c8 1a       	sub	r12, r24
 426:	d8 0a       	sbc	r13, r24
 428:	e8 0a       	sbc	r14, r24
 42a:	f8 0a       	sbc	r15, r24
 42c:	c8 14       	cp	r12, r8
 42e:	d9 04       	cpc	r13, r9
 430:	ea 04       	cpc	r14, r10
 432:	fb 04       	cpc	r15, r11
 434:	68 f3       	brcs	.-38     	; 0x410 <timer0DelayMs+0x32>
			timer0Set(256 - Number_of_tick_per_ms); // Preload with 6 counts if prescaler 64
			while(!(TIFR & (1 << 0)));
			TIFR |= (1 << 0);
		}
		timer0Stop();		
 436:	0e 94 ed 01 	call	0x3da	; 0x3da <timer0Stop>
 43a:	1e c0       	rjmp	.+60     	; 0x478 <timer0DelayMs+0x9a>
	}
	else
	{
		OCR0 = Number_of_tick_per_ms-1;
 43c:	89 ef       	ldi	r24, 0xF9	; 249
 43e:	8c bf       	out	0x3c, r24	; 60
		timer0Start();
 440:	0e 94 e7 01 	call	0x3ce	; 0x3ce <timer0Start>
		for(index=0;index<u16_delay_in_ms;index++){
 444:	a1 2c       	mov	r10, r1
 446:	b1 2c       	mov	r11, r1
 448:	81 14       	cp	r8, r1
 44a:	91 04       	cpc	r9, r1
 44c:	a1 04       	cpc	r10, r1
 44e:	b1 04       	cpc	r11, r1
 450:	89 f0       	breq	.+34     	; 0x474 <timer0DelayMs+0x96>
 452:	80 e0       	ldi	r24, 0x00	; 0
 454:	90 e0       	ldi	r25, 0x00	; 0
 456:	dc 01       	movw	r26, r24
			while(!(TIFR & (1 << 1)));
 458:	08 b6       	in	r0, 0x38	; 56
 45a:	01 fe       	sbrs	r0, 1
 45c:	fd cf       	rjmp	.-6      	; 0x458 <timer0DelayMs+0x7a>
			TIFR |= (1 << 1);
 45e:	28 b7       	in	r18, 0x38	; 56
 460:	22 60       	ori	r18, 0x02	; 2
 462:	28 bf       	out	0x38, r18	; 56
	}
	else
	{
		OCR0 = Number_of_tick_per_ms-1;
		timer0Start();
		for(index=0;index<u16_delay_in_ms;index++){
 464:	01 96       	adiw	r24, 0x01	; 1
 466:	a1 1d       	adc	r26, r1
 468:	b1 1d       	adc	r27, r1
 46a:	88 15       	cp	r24, r8
 46c:	99 05       	cpc	r25, r9
 46e:	aa 05       	cpc	r26, r10
 470:	bb 05       	cpc	r27, r11
 472:	90 f3       	brcs	.-28     	; 0x458 <timer0DelayMs+0x7a>
			while(!(TIFR & (1 << 1)));
			TIFR |= (1 << 1);
		}
		timer0Stop();		
 474:	0e 94 ed 01 	call	0x3da	; 0x3da <timer0Stop>




	
}
 478:	ff 90       	pop	r15
 47a:	ef 90       	pop	r14
 47c:	df 90       	pop	r13
 47e:	cf 90       	pop	r12
 480:	bf 90       	pop	r11
 482:	af 90       	pop	r10
 484:	9f 90       	pop	r9
 486:	8f 90       	pop	r8
 488:	08 95       	ret

0000048a <USART_init>:
}
*/


void USART_init(USART_Config * UART_config)
{
 48a:	fc 01       	movw	r30, r24
	uint8_t UCSRC_URSEL_Value= 128;
	
	UCSRA.B.U2X1 = UART_config->Speed;
 48c:	84 81       	ldd	r24, Z+4	; 0x04
 48e:	80 fd       	sbrc	r24, 0
 490:	59 9a       	sbi	0x0b, 1	; 11
 492:	80 ff       	sbrs	r24, 0
 494:	59 98       	cbi	0x0b, 1	; 11
	UCSRB.UCSRB_ST.TXEN1 = UART_config->Tx_enable;
 496:	82 81       	ldd	r24, Z+2	; 0x02
 498:	80 fd       	sbrc	r24, 0
 49a:	53 9a       	sbi	0x0a, 3	; 10
 49c:	80 ff       	sbrs	r24, 0
 49e:	53 98       	cbi	0x0a, 3	; 10
	UCSRB.UCSRB_ST.RXEN1 = UART_config->Rx_enable;
 4a0:	83 81       	ldd	r24, Z+3	; 0x03
 4a2:	80 fd       	sbrc	r24, 0
 4a4:	54 9a       	sbi	0x0a, 4	; 10
 4a6:	80 ff       	sbrs	r24, 0
 4a8:	54 98       	cbi	0x0a, 4	; 10
	
	UCSRC.UCSRC_B = UCSRC_URSEL_Value|(UART_config->Parity)|(UART_config->Stop)|(UART_config->Mode)|(UART_config->DataSize); 
 4aa:	96 81       	ldd	r25, Z+6	; 0x06
 4ac:	87 81       	ldd	r24, Z+7	; 0x07
 4ae:	89 2b       	or	r24, r25
 4b0:	80 68       	ori	r24, 0x80	; 128
 4b2:	90 85       	ldd	r25, Z+8	; 0x08
 4b4:	89 2b       	or	r24, r25
 4b6:	95 81       	ldd	r25, Z+5	; 0x05
 4b8:	89 2b       	or	r24, r25
 4ba:	80 bd       	out	0x20, r24	; 32
	
	UBRRH = BAUD_PRESCALE>>8;
 4bc:	10 bc       	out	0x20, r1	; 32
	UBRRL = BAUD_PRESCALE;
 4be:	87 e6       	ldi	r24, 0x67	; 103
 4c0:	89 b9       	out	0x09, r24	; 9
 4c2:	08 95       	ret

000004c4 <UART_recieveByte>:

uint8_t UART_recieveByte(void)
{
	/* RXC flag is set when the UART receive data so wait until this 
	 * flag is set to one */
	while(BIT_IS_CLEAR(UCSRA.UCSRA_B,RXC)){}
 4c4:	5f 9b       	sbis	0x0b, 7	; 11
 4c6:	fe cf       	rjmp	.-4      	; 0x4c4 <UART_recieveByte>
	/* Read the received data from the Rx buffer (UDR) and the RXC flag 
	   will be cleared after read this data */	 
    return UDR;		
 4c8:	8c b1       	in	r24, 0x0c	; 12
}
 4ca:	08 95       	ret

000004cc <_exit>:
 4cc:	f8 94       	cli

000004ce <__stop_program>:
 4ce:	ff cf       	rjmp	.-2      	; 0x4ce <__stop_program>
