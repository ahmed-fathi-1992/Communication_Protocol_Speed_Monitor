
ECU_2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000054a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000a  00800060  0000054a  000005de  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  0080006a  0080006a  000005e8  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  000005e8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000097  00000000  00000000  00000cb4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  00000d4b  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000258  00000000  00000000  00000d7a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000213c  00000000  00000000  00000fd2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000091d  00000000  00000000  0000310e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000730  00000000  00000000  00003a2b  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000544  00000000  00000000  0000415c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000dc0  00000000  00000000  000046a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00001249  00000000  00000000  00005460  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000001f0  00000000  00000000  000066a9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
 *  Author: ahmed_pc
 */ 
#include "sevenSeg.h  "

void sevenSegInit(En_SevenSegId_t a_segment_id)
{
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
	gpioPinDirection(SEG_BCD_GPIO, SEG_BCD_BITS, OUTPUT);
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
	gpioPinWrite(SEG_BCD_GPIO, SEG_BCD_BITS, HIGH);
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
		switch (a_segment_id)
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
		{
			case SEG_0:
			gpioPinDirection(SEG_EN1_GPIO, SEG_EN1_BIT, OUTPUT);
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
			gpioPinWrite(SEG_EN1_GPIO, SEG_EN1_BIT, SEG_DISABLE);
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
			break;
			case SEG_1:
			gpioPinDirection(SEG_EN2_GPIO, SEG_EN2_BIT, OUTPUT);
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
			gpioPinWrite(SEG_EN2_GPIO, SEG_EN2_BIT, SEG_DISABLE);
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
			default:
			break;
		}
	
	
}
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea e4       	ldi	r30, 0x4A	; 74
  68:	f5 e0       	ldi	r31, 0x05	; 5
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	aa 36       	cpi	r26, 0x6A	; 106
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	aa e6       	ldi	r26, 0x6A	; 106
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ab 36       	cpi	r26, 0x6B	; 107
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 49 00 	call	0x92	; 0x92 <main>
  8a:	0c 94 a3 02 	jmp	0x546	; 0x546 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:



	
int main(void)
{
  92:	cf 93       	push	r28
  94:	df 93       	push	r29
  96:	cd b7       	in	r28, 0x3d	; 61
  98:	de b7       	in	r29, 0x3e	; 62
  9a:	2a 97       	sbiw	r28, 0x0a	; 10
  9c:	0f b6       	in	r0, 0x3f	; 63
  9e:	f8 94       	cli
  a0:	de bf       	out	0x3e, r29	; 62
  a2:	0f be       	out	0x3f, r0	; 63
  a4:	cd bf       	out	0x3d, r28	; 61
	char Received_Speed=0x00;
  a6:	19 82       	std	Y+1, r1	; 0x01
	
	//	gpioPinDirection(SEG_EN1_GPIO, SEG_EN1_BIT, OUTPUT);
	//	gpioPinWrite(SEG_EN1_GPIO, SEG_EN1_BIT, SEG_ENABLE);

	//gpioPinDirection(GPIOD, BIT4, OUTPUT);
	USART_Config ST_Config={USART_BAUDRATE,TX_ENABLE,RX_ENABLE,NO_DOUBLE_SPEED,DATA_SIZE_8,PARITY_DISABLE,STOP_1BIT,ASYNCH};
  a8:	89 e0       	ldi	r24, 0x09	; 9
  aa:	e1 e6       	ldi	r30, 0x61	; 97
  ac:	f0 e0       	ldi	r31, 0x00	; 0
  ae:	de 01       	movw	r26, r28
  b0:	12 96       	adiw	r26, 0x02	; 2
  b2:	01 90       	ld	r0, Z+
  b4:	0d 92       	st	X+, r0
  b6:	8a 95       	dec	r24
  b8:	e1 f7       	brne	.-8      	; 0xb2 <main+0x20>
		
				pushButtonInit(BTN_0);
  ba:	80 e0       	ldi	r24, 0x00	; 0
  bc:	0e 94 01 01 	call	0x202	; 0x202 <pushButtonInit>
				pushButtonInit(BTN_1);
  c0:	81 e0       	ldi	r24, 0x01	; 1
  c2:	0e 94 01 01 	call	0x202	; 0x202 <pushButtonInit>
				
USART_init(&ST_Config);
  c6:	ce 01       	movw	r24, r28
  c8:	02 96       	adiw	r24, 0x02	; 2
  ca:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <USART_init>

  timer0Init(T0_NORMAL_MODE,T0_OC0_DIS,T0_PRESCALER_64, 0, 0, T0_INTERRUPT_NORMAL);
  ce:	ee 24       	eor	r14, r14
  d0:	e3 94       	inc	r14
  d2:	00 e0       	ldi	r16, 0x00	; 0
  d4:	20 e0       	ldi	r18, 0x00	; 0
  d6:	43 e0       	ldi	r20, 0x03	; 3
  d8:	60 e0       	ldi	r22, 0x00	; 0
  da:	80 e0       	ldi	r24, 0x00	; 0
  dc:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <timer0Init>
  
	SPI_Init_(Interrupt_Enable,SPI_Enable,LSB,Slave,Leading_Edge_Rising,Leading_Edge_Sample,Frequency_16);
  e0:	cc 24       	eor	r12, r12
  e2:	c3 94       	inc	r12
  e4:	e1 2c       	mov	r14, r1
  e6:	20 e0       	ldi	r18, 0x00	; 0
  e8:	40 e2       	ldi	r20, 0x20	; 32
  ea:	60 e4       	ldi	r22, 0x40	; 64
  ec:	80 e8       	ldi	r24, 0x80	; 128
  ee:	0e 94 9c 01 	call	0x338	; 0x338 <SPI_Init_>
// 	softwareDelayMs(2000);
	
			//timer0Init(T0_NORMAL_MODE,T0_OC0_DIS,T0_PRESCALER_64,0x00,0x00,T0_POLLING);
			
		
timer0DelayMs(100);
  f2:	84 e6       	ldi	r24, 0x64	; 100
  f4:	90 e0       	ldi	r25, 0x00	; 0
  f6:	0e 94 04 02 	call	0x408	; 0x408 <timer0DelayMs>
	UART_sendByte('a');
	while(Released == pushButtonGetStatus(BTN_0));
	UART_sendByte('s');
	Received_Speed = SPI_Recive();
	UART_sendByte('r');
	while(Released == pushButtonGetStatus(BTN_1))
  fa:	c1 2c       	mov	r12, r1
  fc:	d1 2c       	mov	r13, r1
		
	}
	
	
	//send UART(distance /10)
	UART_sendByte(distance /10);
  fe:	0f 2e       	mov	r0, r31
 100:	fa e0       	ldi	r31, 0x0A	; 10
 102:	ef 2e       	mov	r14, r31
 104:	f1 2c       	mov	r15, r1
 106:	f0 2d       	mov	r31, r0
{
	//timer0DelayMs(300);
	//UART_sendByte('a');	
	//char__ ++;
	
	UART_sendByte('a');
 108:	81 e6       	ldi	r24, 0x61	; 97
 10a:	0e 94 77 02 	call	0x4ee	; 0x4ee <UART_sendByte>
	while(Released == pushButtonGetStatus(BTN_0));
 10e:	80 e0       	ldi	r24, 0x00	; 0
 110:	0e 94 21 01 	call	0x242	; 0x242 <pushButtonGetStatus>
 114:	88 23       	and	r24, r24
 116:	d9 f3       	breq	.-10     	; 0x10e <main+0x7c>
	UART_sendByte('s');
 118:	83 e7       	ldi	r24, 0x73	; 115
 11a:	0e 94 77 02 	call	0x4ee	; 0x4ee <UART_sendByte>
	Received_Speed = SPI_Recive();
 11e:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <SPI_Recive>
 122:	89 83       	std	Y+1, r24	; 0x01
	UART_sendByte('r');
 124:	82 e7       	ldi	r24, 0x72	; 114
 126:	0e 94 77 02 	call	0x4ee	; 0x4ee <UART_sendByte>
	while(Released == pushButtonGetStatus(BTN_1))
 12a:	86 01       	movw	r16, r12
 12c:	0b c0       	rjmp	.+22     	; 0x144 <main+0xb2>
	{
		
		//Received_Speed = SPI_Recive();
		//timer0DelayMs(50);
		SPI_Recive_Unblock(&Received_Speed);
 12e:	ce 01       	movw	r24, r28
 130:	01 96       	adiw	r24, 0x01	; 1
 132:	0e 94 e0 01 	call	0x3c0	; 0x3c0 <SPI_Recive_Unblock>
		//Received_Speed = SPI_Recive();
		timer0DelayMs(100);
 136:	84 e6       	ldi	r24, 0x64	; 100
 138:	90 e0       	ldi	r25, 0x00	; 0
 13a:	0e 94 04 02 	call	0x408	; 0x408 <timer0DelayMs>
		//UART_sendByte(Received_Speed);
		//sevenSegWrite(SEG_0, Received_Speed);
		distance = distance + Received_Speed;
 13e:	89 81       	ldd	r24, Y+1	; 0x01
 140:	08 0f       	add	r16, r24
 142:	11 1d       	adc	r17, r1
	UART_sendByte('a');
	while(Released == pushButtonGetStatus(BTN_0));
	UART_sendByte('s');
	Received_Speed = SPI_Recive();
	UART_sendByte('r');
	while(Released == pushButtonGetStatus(BTN_1))
 144:	81 e0       	ldi	r24, 0x01	; 1
 146:	0e 94 21 01 	call	0x242	; 0x242 <pushButtonGetStatus>
 14a:	88 23       	and	r24, r24
 14c:	81 f3       	breq	.-32     	; 0x12e <main+0x9c>
		
	}
	
	
	//send UART(distance /10)
	UART_sendByte(distance /10);
 14e:	c8 01       	movw	r24, r16
 150:	b7 01       	movw	r22, r14
 152:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <__divmodhi4>
 156:	86 2f       	mov	r24, r22
 158:	0e 94 77 02 	call	0x4ee	; 0x4ee <UART_sendByte>
	distance =0;
	
}
 15c:	d5 cf       	rjmp	.-86     	; 0x108 <main+0x76>

0000015e <gpioPinDirection>:
 * 				- 0x00 -> Input
 * 				- 0xff -> Output
 */
void gpioPinDirection(uint8_t u8_port, uint8_t u8_pins, uint8_t u8_direction)
{
		switch (u8_port)
 15e:	81 30       	cpi	r24, 0x01	; 1
 160:	81 f0       	breq	.+32     	; 0x182 <gpioPinDirection+0x24>
 162:	28 f0       	brcs	.+10     	; 0x16e <gpioPinDirection+0x10>
 164:	82 30       	cpi	r24, 0x02	; 2
 166:	b9 f0       	breq	.+46     	; 0x196 <gpioPinDirection+0x38>
 168:	83 30       	cpi	r24, 0x03	; 3
 16a:	41 f5       	brne	.+80     	; 0x1bc <gpioPinDirection+0x5e>
 16c:	1e c0       	rjmp	.+60     	; 0x1aa <gpioPinDirection+0x4c>
		{
			case 0:
			PORTA_DIR = PORTA_DIR & (~u8_pins);
 16e:	8a b3       	in	r24, 0x1a	; 26
 170:	96 2f       	mov	r25, r22
 172:	90 95       	com	r25
 174:	89 23       	and	r24, r25
 176:	8a bb       	out	0x1a, r24	; 26
			PORTA_DIR = PORTA_DIR |(u8_pins & u8_direction);
 178:	8a b3       	in	r24, 0x1a	; 26
 17a:	64 23       	and	r22, r20
 17c:	68 2b       	or	r22, r24
 17e:	6a bb       	out	0x1a, r22	; 26
			break;
 180:	08 95       	ret
			case 1:
			PORTB_DIR = PORTB_DIR & (~u8_pins);
 182:	87 b3       	in	r24, 0x17	; 23
 184:	96 2f       	mov	r25, r22
 186:	90 95       	com	r25
 188:	89 23       	and	r24, r25
 18a:	87 bb       	out	0x17, r24	; 23
			PORTB_DIR = PORTB_DIR |(u8_pins & u8_direction);
 18c:	87 b3       	in	r24, 0x17	; 23
 18e:	64 23       	and	r22, r20
 190:	68 2b       	or	r22, r24
 192:	67 bb       	out	0x17, r22	; 23
			break;
 194:	08 95       	ret
			case 2:
			PORTC_DIR = PORTC_DIR & (~u8_pins);
 196:	84 b3       	in	r24, 0x14	; 20
 198:	96 2f       	mov	r25, r22
 19a:	90 95       	com	r25
 19c:	89 23       	and	r24, r25
 19e:	84 bb       	out	0x14, r24	; 20
			PORTC_DIR = PORTC_DIR |(u8_pins & u8_direction);
 1a0:	84 b3       	in	r24, 0x14	; 20
 1a2:	64 23       	and	r22, r20
 1a4:	68 2b       	or	r22, r24
 1a6:	64 bb       	out	0x14, r22	; 20
			break;
 1a8:	08 95       	ret
			case 3:
			PORTD_DIR = PORTD_DIR & (~u8_pins);
 1aa:	81 b3       	in	r24, 0x11	; 17
 1ac:	96 2f       	mov	r25, r22
 1ae:	90 95       	com	r25
 1b0:	89 23       	and	r24, r25
 1b2:	81 bb       	out	0x11, r24	; 17
			PORTD_DIR = PORTD_DIR |(u8_pins & u8_direction);
 1b4:	81 b3       	in	r24, 0x11	; 17
 1b6:	64 23       	and	r22, r20
 1b8:	68 2b       	or	r22, r24
 1ba:	61 bb       	out	0x11, r22	; 17
 1bc:	08 95       	ret

000001be <gpioPinRead>:
 * @return
 */
uint8_t gpioPinRead(uint8_t u8_port, uint8_t u8_pin)
{
	
					switch (u8_port)
 1be:	81 30       	cpi	r24, 0x01	; 1
 1c0:	61 f0       	breq	.+24     	; 0x1da <gpioPinRead+0x1c>
 1c2:	28 f0       	brcs	.+10     	; 0x1ce <gpioPinRead+0x10>
 1c4:	82 30       	cpi	r24, 0x02	; 2
 1c6:	79 f0       	breq	.+30     	; 0x1e6 <gpioPinRead+0x28>
 1c8:	83 30       	cpi	r24, 0x03	; 3
 1ca:	c9 f4       	brne	.+50     	; 0x1fe <gpioPinRead+0x40>
 1cc:	12 c0       	rjmp	.+36     	; 0x1f2 <gpioPinRead+0x34>
					{
						case 0:
						if(PORTA_PIN &u8_pin)
 1ce:	89 b3       	in	r24, 0x19	; 25
 1d0:	68 23       	and	r22, r24
 1d2:	81 e0       	ldi	r24, 0x01	; 1
 1d4:	a9 f4       	brne	.+42     	; 0x200 <gpioPinRead+0x42>
 1d6:	80 e0       	ldi	r24, 0x00	; 0
 1d8:	08 95       	ret
						return 1;
						else
						return 0;
						break;
						case 1:
						if(PORTB_PIN &u8_pin)
 1da:	86 b3       	in	r24, 0x16	; 22
 1dc:	68 23       	and	r22, r24
 1de:	81 e0       	ldi	r24, 0x01	; 1
 1e0:	79 f4       	brne	.+30     	; 0x200 <gpioPinRead+0x42>
 1e2:	80 e0       	ldi	r24, 0x00	; 0
 1e4:	08 95       	ret
						return 1;
						else
						return 0;
						break;
						case 2:
						if(PORTC_PIN &u8_pin)
 1e6:	83 b3       	in	r24, 0x13	; 19
 1e8:	68 23       	and	r22, r24
 1ea:	81 e0       	ldi	r24, 0x01	; 1
 1ec:	49 f4       	brne	.+18     	; 0x200 <gpioPinRead+0x42>
 1ee:	80 e0       	ldi	r24, 0x00	; 0
 1f0:	08 95       	ret
						return 1;
						else
						return 0;
						break;
						case 3:
						if(PORTD_PIN &u8_pin)
 1f2:	80 b3       	in	r24, 0x10	; 16
 1f4:	68 23       	and	r22, r24
 1f6:	81 e0       	ldi	r24, 0x01	; 1
 1f8:	19 f4       	brne	.+6      	; 0x200 <gpioPinRead+0x42>
 1fa:	80 e0       	ldi	r24, 0x00	; 0
 1fc:	08 95       	ret
						return 1;
						else
						return 0;
						break;
						default:
						return 0;
 1fe:	80 e0       	ldi	r24, 0x00	; 0
						break;
					}

	
}
 200:	08 95       	ret

00000202 <pushButtonInit>:
 * 				  one of the enum (En_buttonId) parameters
 *
 */
void pushButtonInit(En_buttonId_t en_butotn_id)
{
			switch (en_butotn_id)
 202:	81 30       	cpi	r24, 0x01	; 1
 204:	61 f0       	breq	.+24     	; 0x21e <pushButtonInit+0x1c>
 206:	28 f0       	brcs	.+10     	; 0x212 <pushButtonInit+0x10>
 208:	82 30       	cpi	r24, 0x02	; 2
 20a:	79 f0       	breq	.+30     	; 0x22a <pushButtonInit+0x28>
 20c:	83 30       	cpi	r24, 0x03	; 3
 20e:	c1 f4       	brne	.+48     	; 0x240 <pushButtonInit+0x3e>
 210:	12 c0       	rjmp	.+36     	; 0x236 <pushButtonInit+0x34>
			{
				case BTN_0:
				gpioPinDirection(BTN_0_GPIO, BTN_0_BIT, INPUT);
 212:	40 e0       	ldi	r20, 0x00	; 0
 214:	60 e1       	ldi	r22, 0x10	; 16
 216:	82 e0       	ldi	r24, 0x02	; 2
 218:	0e 94 af 00 	call	0x15e	; 0x15e <gpioPinDirection>
				//gpioPinWrite(GPIOC, BIT4, HIGH);				
				break;
 21c:	08 95       	ret
				case BTN_1:
				gpioPinDirection(BTN_1_GPIO, BTN_1_BIT, INPUT);
 21e:	40 e0       	ldi	r20, 0x00	; 0
 220:	64 e0       	ldi	r22, 0x04	; 4
 222:	81 e0       	ldi	r24, 0x01	; 1
 224:	0e 94 af 00 	call	0x15e	; 0x15e <gpioPinDirection>
				//gpioPinWrite(GPIOB, BIT2, HIGH);
				break;
 228:	08 95       	ret
				case BTN_2:
				gpioPinDirection(BTN_2_GPIO, BTN_2_BIT, INPUT);
 22a:	40 e0       	ldi	r20, 0x00	; 0
 22c:	64 e0       	ldi	r22, 0x04	; 4
 22e:	80 e0       	ldi	r24, 0x00	; 0
 230:	0e 94 af 00 	call	0x15e	; 0x15e <gpioPinDirection>
				//gpioPinWrite(GPIOA, BIT2, HIGH);
				break;
 234:	08 95       	ret
				case BTN_3:
				gpioPinDirection(BTN_3_GPIO, BTN_3_BIT, INPUT);
 236:	40 e0       	ldi	r20, 0x00	; 0
 238:	68 e0       	ldi	r22, 0x08	; 8
 23a:	80 e0       	ldi	r24, 0x00	; 0
 23c:	0e 94 af 00 	call	0x15e	; 0x15e <gpioPinDirection>
 240:	08 95       	ret

00000242 <pushButtonGetStatus>:
 * Description: read BTN_x (where x 0, 1, 2, 3) state which is stored in the program
 * 				in the update function
 *
 */
En_buttonStatus_t pushButtonGetStatus(En_buttonId_t en_butotn_id)
{
 242:	cf 93       	push	r28
 244:	c8 2f       	mov	r28, r24
	        softwareDelayMs(50);
 246:	62 e3       	ldi	r22, 0x32	; 50
 248:	70 e0       	ldi	r23, 0x00	; 0
 24a:	80 e0       	ldi	r24, 0x00	; 0
 24c:	90 e0       	ldi	r25, 0x00	; 0
 24e:	0e 94 48 01 	call	0x290	; 0x290 <softwareDelayMs>
	
				switch (en_butotn_id)
 252:	c1 30       	cpi	r28, 0x01	; 1
 254:	59 f0       	breq	.+22     	; 0x26c <pushButtonGetStatus+0x2a>
 256:	28 f0       	brcs	.+10     	; 0x262 <pushButtonGetStatus+0x20>
 258:	c2 30       	cpi	r28, 0x02	; 2
 25a:	69 f0       	breq	.+26     	; 0x276 <pushButtonGetStatus+0x34>
 25c:	c3 30       	cpi	r28, 0x03	; 3
 25e:	a9 f4       	brne	.+42     	; 0x28a <pushButtonGetStatus+0x48>
 260:	0f c0       	rjmp	.+30     	; 0x280 <pushButtonGetStatus+0x3e>
				{
					case BTN_0:
					return (gpioPinRead(BTN_0_GPIO, BTN_0_BIT));
 262:	60 e1       	ldi	r22, 0x10	; 16
 264:	82 e0       	ldi	r24, 0x02	; 2
 266:	0e 94 df 00 	call	0x1be	; 0x1be <gpioPinRead>
 26a:	10 c0       	rjmp	.+32     	; 0x28c <pushButtonGetStatus+0x4a>
					break;
					case BTN_1:
					return (gpioPinRead(BTN_1_GPIO, BTN_1_BIT));
 26c:	64 e0       	ldi	r22, 0x04	; 4
 26e:	81 e0       	ldi	r24, 0x01	; 1
 270:	0e 94 df 00 	call	0x1be	; 0x1be <gpioPinRead>
 274:	0b c0       	rjmp	.+22     	; 0x28c <pushButtonGetStatus+0x4a>
					break;
					case BTN_2:
					return (gpioPinRead(BTN_2_GPIO, BTN_2_BIT));
 276:	64 e0       	ldi	r22, 0x04	; 4
 278:	80 e0       	ldi	r24, 0x00	; 0
 27a:	0e 94 df 00 	call	0x1be	; 0x1be <gpioPinRead>
 27e:	06 c0       	rjmp	.+12     	; 0x28c <pushButtonGetStatus+0x4a>
					break;
					case BTN_3:
					return (gpioPinRead(BTN_3_GPIO, BTN_3_BIT));
 280:	68 e0       	ldi	r22, 0x08	; 8
 282:	80 e0       	ldi	r24, 0x00	; 0
 284:	0e 94 df 00 	call	0x1be	; 0x1be <gpioPinRead>
 288:	01 c0       	rjmp	.+2      	; 0x28c <pushButtonGetStatus+0x4a>
					break;
					default:
					return 0;
 28a:	80 e0       	ldi	r24, 0x00	; 0
					break;
				}

	
}
 28c:	cf 91       	pop	r28
 28e:	08 95       	ret

00000290 <softwareDelayMs>:
 */ 

#include "softwareDelay.h "

void softwareDelayMs(uint32_t u32_delay_in_ms)
{
 290:	8f 92       	push	r8
 292:	9f 92       	push	r9
 294:	af 92       	push	r10
 296:	bf 92       	push	r11
 298:	ef 92       	push	r14
 29a:	ff 92       	push	r15
 29c:	0f 93       	push	r16
 29e:	1f 93       	push	r17
 2a0:	cf 93       	push	r28
 2a2:	df 93       	push	r29
 2a4:	00 d0       	rcall	.+0      	; 0x2a6 <softwareDelayMs+0x16>
 2a6:	00 d0       	rcall	.+0      	; 0x2a8 <softwareDelayMs+0x18>
 2a8:	cd b7       	in	r28, 0x3d	; 61
 2aa:	de b7       	in	r29, 0x3e	; 62
		volatile uint32_t d=0;
 2ac:	19 82       	std	Y+1, r1	; 0x01
 2ae:	1a 82       	std	Y+2, r1	; 0x02
 2b0:	1b 82       	std	Y+3, r1	; 0x03
 2b2:	1c 82       	std	Y+4, r1	; 0x04
		for(int y=0;y<u32_delay_in_ms;y++)
 2b4:	61 15       	cp	r22, r1
 2b6:	71 05       	cpc	r23, r1
 2b8:	81 05       	cpc	r24, r1
 2ba:	91 05       	cpc	r25, r1
 2bc:	19 f5       	brne	.+70     	; 0x304 <softwareDelayMs+0x74>
 2be:	2d c0       	rjmp	.+90     	; 0x31a <softwareDelayMs+0x8a>
		{			
			for(int z=0;z<19;z++)
			{
				for(int w=0;w<16;w++)
				{
					d++;					
 2c0:	89 80       	ldd	r8, Y+1	; 0x01
 2c2:	9a 80       	ldd	r9, Y+2	; 0x02
 2c4:	ab 80       	ldd	r10, Y+3	; 0x03
 2c6:	bc 80       	ldd	r11, Y+4	; 0x04
 2c8:	af ef       	ldi	r26, 0xFF	; 255
 2ca:	8a 1a       	sub	r8, r26
 2cc:	9a 0a       	sbc	r9, r26
 2ce:	aa 0a       	sbc	r10, r26
 2d0:	ba 0a       	sbc	r11, r26
 2d2:	89 82       	std	Y+1, r8	; 0x01
 2d4:	9a 82       	std	Y+2, r9	; 0x02
 2d6:	ab 82       	std	Y+3, r10	; 0x03
 2d8:	bc 82       	std	Y+4, r11	; 0x04
 2da:	21 50       	subi	r18, 0x01	; 1
 2dc:	31 09       	sbc	r19, r1
		volatile uint32_t d=0;
		for(int y=0;y<u32_delay_in_ms;y++)
		{			
			for(int z=0;z<19;z++)
			{
				for(int w=0;w<16;w++)
 2de:	81 f7       	brne	.-32     	; 0x2c0 <softwareDelayMs+0x30>
 2e0:	41 50       	subi	r20, 0x01	; 1
 2e2:	51 09       	sbc	r21, r1
void softwareDelayMs(uint32_t u32_delay_in_ms)
{
		volatile uint32_t d=0;
		for(int y=0;y<u32_delay_in_ms;y++)
		{			
			for(int z=0;z<19;z++)
 2e4:	11 f0       	breq	.+4      	; 0x2ea <softwareDelayMs+0x5a>
 */ 

#include "softwareDelay.h "

void softwareDelayMs(uint32_t u32_delay_in_ms)
{
 2e6:	9f 01       	movw	r18, r30
 2e8:	eb cf       	rjmp	.-42     	; 0x2c0 <softwareDelayMs+0x30>
		volatile uint32_t d=0;
		for(int y=0;y<u32_delay_in_ms;y++)
 2ea:	0f 5f       	subi	r16, 0xFF	; 255
 2ec:	1f 4f       	sbci	r17, 0xFF	; 255
 2ee:	48 01       	movw	r8, r16
 2f0:	aa 24       	eor	r10, r10
 2f2:	97 fc       	sbrc	r9, 7
 2f4:	a0 94       	com	r10
 2f6:	ba 2c       	mov	r11, r10
 2f8:	86 16       	cp	r8, r22
 2fa:	97 06       	cpc	r9, r23
 2fc:	a8 06       	cpc	r10, r24
 2fe:	b9 06       	cpc	r11, r25
 300:	50 f0       	brcs	.+20     	; 0x316 <softwareDelayMs+0x86>
 302:	0b c0       	rjmp	.+22     	; 0x31a <softwareDelayMs+0x8a>
 304:	00 e0       	ldi	r16, 0x00	; 0
 306:	10 e0       	ldi	r17, 0x00	; 0
 */ 

#include "softwareDelay.h "

void softwareDelayMs(uint32_t u32_delay_in_ms)
{
 308:	0f 2e       	mov	r0, r31
 30a:	f3 e1       	ldi	r31, 0x13	; 19
 30c:	ef 2e       	mov	r14, r31
 30e:	f1 2c       	mov	r15, r1
 310:	f0 2d       	mov	r31, r0
 312:	e0 e1       	ldi	r30, 0x10	; 16
 314:	f0 e0       	ldi	r31, 0x00	; 0
 316:	a7 01       	movw	r20, r14
 318:	e6 cf       	rjmp	.-52     	; 0x2e6 <softwareDelayMs+0x56>
			}
		}
		
	
	
}
 31a:	0f 90       	pop	r0
 31c:	0f 90       	pop	r0
 31e:	0f 90       	pop	r0
 320:	0f 90       	pop	r0
 322:	df 91       	pop	r29
 324:	cf 91       	pop	r28
 326:	1f 91       	pop	r17
 328:	0f 91       	pop	r16
 32a:	ff 90       	pop	r15
 32c:	ef 90       	pop	r14
 32e:	bf 90       	pop	r11
 330:	af 90       	pop	r10
 332:	9f 90       	pop	r9
 334:	8f 90       	pop	r8
 336:	08 95       	ret

00000338 <SPI_Init_>:

#include "SPI_.h"


void SPI_Init_(Interrupt_State interrupt_state,SPI_En_State SPI_state , Data_Order data_order ,SPI_Mode SPI_mode ,Clock_Polarity clock_Polarity ,Clock_Phase clock_phase , SPI_Clock_Rate clock_rate)
{
 338:	cf 92       	push	r12
 33a:	ef 92       	push	r14
 33c:	0f 93       	push	r16
 33e:	cf 93       	push	r28
 340:	c6 2f       	mov	r28, r22
	//SPCR =0b01010001;
	SPCR = SPCR|(interrupt_state | data_order | SPI_mode | clock_Polarity | clock_phase | clock_rate);	
 342:	9d b1       	in	r25, 0x0d	; 13
 344:	89 2b       	or	r24, r25
 346:	48 2b       	or	r20, r24
 348:	42 2b       	or	r20, r18
 34a:	04 2b       	or	r16, r20
 34c:	e0 2a       	or	r14, r16
 34e:	ce 28       	or	r12, r14
 350:	cd b8       	out	0x0d, r12	; 13
	//Bit 4  MSTR: Master/Slave Select   1:Master 0:slave
	//Bit 3  CPOL: Clock Polarity
	//Bit 2  CPHA: Clock Phase
	//Bits 1, 0  SPR1, SPR0: SPI Clock Rate Select 1 and 0 
    
	if(SPI_mode == Master)
 352:	20 31       	cpi	r18, 0x10	; 16
 354:	a9 f4       	brne	.+42     	; 0x380 <SPI_Init_+0x48>
	{gpioPinDirection(SPI_MOSI_PORT, SPI_MOSI_PIN, OUTPUT);
 356:	4f ef       	ldi	r20, 0xFF	; 255
 358:	60 e2       	ldi	r22, 0x20	; 32
 35a:	81 e0       	ldi	r24, 0x01	; 1
 35c:	0e 94 af 00 	call	0x15e	; 0x15e <gpioPinDirection>
	 gpioPinDirection(SPI_MISO_PORT, SPI_MISO_PIN, INPUT);	 	
 360:	40 e0       	ldi	r20, 0x00	; 0
 362:	60 e4       	ldi	r22, 0x40	; 64
 364:	81 e0       	ldi	r24, 0x01	; 1
 366:	0e 94 af 00 	call	0x15e	; 0x15e <gpioPinDirection>
	 gpioPinDirection(SPI_SCK_PORT, SPI_SCK_PIN, OUTPUT);
 36a:	4f ef       	ldi	r20, 0xFF	; 255
 36c:	60 e8       	ldi	r22, 0x80	; 128
 36e:	81 e0       	ldi	r24, 0x01	; 1
 370:	0e 94 af 00 	call	0x15e	; 0x15e <gpioPinDirection>
	 gpioPinDirection(SPI_SS_PORT, SPI_SS_PIN, OUTPUT);	
 374:	4f ef       	ldi	r20, 0xFF	; 255
 376:	60 e1       	ldi	r22, 0x10	; 16
 378:	81 e0       	ldi	r24, 0x01	; 1
 37a:	0e 94 af 00 	call	0x15e	; 0x15e <gpioPinDirection>
 37e:	14 c0       	rjmp	.+40     	; 0x3a8 <SPI_Init_+0x70>
	}else
	{gpioPinDirection(SPI_MOSI_PORT, SPI_MOSI_PIN, INPUT);
 380:	40 e0       	ldi	r20, 0x00	; 0
 382:	60 e2       	ldi	r22, 0x20	; 32
 384:	81 e0       	ldi	r24, 0x01	; 1
 386:	0e 94 af 00 	call	0x15e	; 0x15e <gpioPinDirection>
	 gpioPinDirection(SPI_MISO_PORT, SPI_MISO_PIN, OUTPUT);
 38a:	4f ef       	ldi	r20, 0xFF	; 255
 38c:	60 e4       	ldi	r22, 0x40	; 64
 38e:	81 e0       	ldi	r24, 0x01	; 1
 390:	0e 94 af 00 	call	0x15e	; 0x15e <gpioPinDirection>
	 gpioPinDirection(SPI_SCK_PORT, SPI_SCK_PIN, INPUT);
 394:	40 e0       	ldi	r20, 0x00	; 0
 396:	60 e8       	ldi	r22, 0x80	; 128
 398:	81 e0       	ldi	r24, 0x01	; 1
 39a:	0e 94 af 00 	call	0x15e	; 0x15e <gpioPinDirection>
	 gpioPinDirection(SPI_SS_PORT, SPI_SS_PIN, INPUT);
 39e:	40 e0       	ldi	r20, 0x00	; 0
 3a0:	60 e1       	ldi	r22, 0x10	; 16
 3a2:	81 e0       	ldi	r24, 0x01	; 1
 3a4:	0e 94 af 00 	call	0x15e	; 0x15e <gpioPinDirection>
	}
	
	SPCR = SPCR|SPI_state;
 3a8:	8d b1       	in	r24, 0x0d	; 13
 3aa:	c8 2b       	or	r28, r24
 3ac:	cd b9       	out	0x0d, r28	; 13
    		
}
 3ae:	cf 91       	pop	r28
 3b0:	0f 91       	pop	r16
 3b2:	ef 90       	pop	r14
 3b4:	cf 90       	pop	r12
 3b6:	08 95       	ret

000003b8 <SPI_Recive>:

	
}
char SPI_Recive(void)
{
	while(!(SPSR& 0x80)); // wait until receive complete
 3b8:	77 9b       	sbis	0x0e, 7	; 14
 3ba:	fe cf       	rjmp	.-4      	; 0x3b8 <SPI_Recive>
	  return SPDR ;			
 3bc:	8f b1       	in	r24, 0x0f	; 15
}
 3be:	08 95       	ret

000003c0 <SPI_Recive_Unblock>:
{
	/*
	while(!(SPSR& 0x80)); // wait until receive complete
	return SPDR ;
	*/
	if ((SPSR& 0x80)==1)
 3c0:	8e b1       	in	r24, 0x0e	; 14
	}else
	{
		return 1;
	}
	
}
 3c2:	81 e0       	ldi	r24, 0x01	; 1
 3c4:	08 95       	ret

000003c6 <timer0Init>:
 * @param initialValue
 * @param outputCompare
 * @param interruptMask
 */
void timer0Init(En_timer0Mode_t en_mode,En_timer0OC_t en_OC0,En_timer0perscaler_t en_prescal, uint8_t u8_initialValue, uint8_t u8_outputCompare, En_timer0Interrupt_t en_interruptMask)
{
 3c6:	ef 92       	push	r14
 3c8:	0f 93       	push	r16
	
	TCCR0= TCCR0 | en_mode;
 3ca:	93 b7       	in	r25, 0x33	; 51
 3cc:	98 2b       	or	r25, r24
 3ce:	93 bf       	out	0x33, r25	; 51
	TCCR0= TCCR0 | en_OC0;
 3d0:	93 b7       	in	r25, 0x33	; 51
 3d2:	69 2b       	or	r22, r25
 3d4:	63 bf       	out	0x33, r22	; 51
	TCCR0= TCCR0 | en_prescal;		
 3d6:	93 b7       	in	r25, 0x33	; 51
 3d8:	94 2b       	or	r25, r20
 3da:	93 bf       	out	0x33, r25	; 51
	
	TIMSK = TIMSK |  en_interruptMask;
 3dc:	99 b7       	in	r25, 0x39	; 57
 3de:	e9 2a       	or	r14, r25
 3e0:	e9 be       	out	0x39, r14	; 57
	
	TCNT0 = u8_initialValue;
 3e2:	22 bf       	out	0x32, r18	; 50
	
	OCR0 = u8_outputCompare;
 3e4:	0c bf       	out	0x3c, r16	; 60
	
	TIMER0_PRESCALER= en_prescal;
 3e6:	40 93 60 00 	sts	0x0060, r20
	
	TIMER0_MODE= en_mode; 
 3ea:	80 93 6a 00 	sts	0x006A, r24
	
}
 3ee:	0f 91       	pop	r16
 3f0:	ef 90       	pop	r14
 3f2:	08 95       	ret

000003f4 <timer0Set>:
 * Description:
 * @param value
 */
void timer0Set(uint8_t u8_value)
{
	TCNT0=u8_value;
 3f4:	82 bf       	out	0x32, r24	; 50
 3f6:	08 95       	ret

000003f8 <timer0Start>:
/**
 * Description:
 */
void timer0Start(void)
{
	TCCR0 = TCCR0 | TIMER0_PRESCALER;
 3f8:	93 b7       	in	r25, 0x33	; 51
 3fa:	80 91 60 00 	lds	r24, 0x0060
 3fe:	89 2b       	or	r24, r25
 400:	83 bf       	out	0x33, r24	; 51
 402:	08 95       	ret

00000404 <timer0Stop>:
/**
 * Description:
 */
void timer0Stop(void)
{
	TCCR0 = T0_CLOCK_MASK & T0_NO_CLOCK;
 404:	13 be       	out	0x33, r1	; 51
 406:	08 95       	ret

00000408 <timer0DelayMs>:
/**
 * Description:
 * @param delay
 */
void timer0DelayMs(uint16_t u16_delay_in_ms)
{
 408:	8f 92       	push	r8
 40a:	9f 92       	push	r9
 40c:	af 92       	push	r10
 40e:	bf 92       	push	r11
 410:	cf 92       	push	r12
 412:	df 92       	push	r13
 414:	ef 92       	push	r14
 416:	ff 92       	push	r15
 418:	4c 01       	movw	r8, r24
	uint32_t index=0;
	uint32_t Number_of_tick_per_ms =0;
	
	Number_of_tick_per_ms= FCPU /(64000) ; //64 * 1000 // prescaler 64
	
	if(TIMER0_MODE == T0_NORMAL_MODE) //
 41a:	80 91 6a 00 	lds	r24, 0x006A
 41e:	81 11       	cpse	r24, r1
 420:	22 c0       	rjmp	.+68     	; 0x466 <timer0DelayMs+0x5e>
	{
		timer0Start();
 422:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <timer0Start>
		for(index=0;index<u16_delay_in_ms;index++){
 426:	a1 2c       	mov	r10, r1
 428:	b1 2c       	mov	r11, r1
 42a:	81 14       	cp	r8, r1
 42c:	91 04       	cpc	r9, r1
 42e:	a1 04       	cpc	r10, r1
 430:	b1 04       	cpc	r11, r1
 432:	b1 f0       	breq	.+44     	; 0x460 <timer0DelayMs+0x58>
 434:	c1 2c       	mov	r12, r1
 436:	d1 2c       	mov	r13, r1
 438:	76 01       	movw	r14, r12
			timer0Set(256 - Number_of_tick_per_ms); // Preload with 6 counts if prescaler 64
 43a:	86 e0       	ldi	r24, 0x06	; 6
 43c:	0e 94 fa 01 	call	0x3f4	; 0x3f4 <timer0Set>
			while(!(TIFR & (1 << 0)));
 440:	08 b6       	in	r0, 0x38	; 56
 442:	00 fe       	sbrs	r0, 0
 444:	fd cf       	rjmp	.-6      	; 0x440 <timer0DelayMs+0x38>
			TIFR |= (1 << 0);
 446:	88 b7       	in	r24, 0x38	; 56
 448:	81 60       	ori	r24, 0x01	; 1
 44a:	88 bf       	out	0x38, r24	; 56
	Number_of_tick_per_ms= FCPU /(64000) ; //64 * 1000 // prescaler 64
	
	if(TIMER0_MODE == T0_NORMAL_MODE) //
	{
		timer0Start();
		for(index=0;index<u16_delay_in_ms;index++){
 44c:	8f ef       	ldi	r24, 0xFF	; 255
 44e:	c8 1a       	sub	r12, r24
 450:	d8 0a       	sbc	r13, r24
 452:	e8 0a       	sbc	r14, r24
 454:	f8 0a       	sbc	r15, r24
 456:	c8 14       	cp	r12, r8
 458:	d9 04       	cpc	r13, r9
 45a:	ea 04       	cpc	r14, r10
 45c:	fb 04       	cpc	r15, r11
 45e:	68 f3       	brcs	.-38     	; 0x43a <timer0DelayMs+0x32>
			timer0Set(256 - Number_of_tick_per_ms); // Preload with 6 counts if prescaler 64
			while(!(TIFR & (1 << 0)));
			TIFR |= (1 << 0);
		}
		timer0Stop();		
 460:	0e 94 02 02 	call	0x404	; 0x404 <timer0Stop>
 464:	1e c0       	rjmp	.+60     	; 0x4a2 <timer0DelayMs+0x9a>
	}
	else
	{
		OCR0 = Number_of_tick_per_ms-1;
 466:	89 ef       	ldi	r24, 0xF9	; 249
 468:	8c bf       	out	0x3c, r24	; 60
		timer0Start();
 46a:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <timer0Start>
		for(index=0;index<u16_delay_in_ms;index++){
 46e:	a1 2c       	mov	r10, r1
 470:	b1 2c       	mov	r11, r1
 472:	81 14       	cp	r8, r1
 474:	91 04       	cpc	r9, r1
 476:	a1 04       	cpc	r10, r1
 478:	b1 04       	cpc	r11, r1
 47a:	89 f0       	breq	.+34     	; 0x49e <timer0DelayMs+0x96>
 47c:	80 e0       	ldi	r24, 0x00	; 0
 47e:	90 e0       	ldi	r25, 0x00	; 0
 480:	dc 01       	movw	r26, r24
			while(!(TIFR & (1 << 1)));
 482:	08 b6       	in	r0, 0x38	; 56
 484:	01 fe       	sbrs	r0, 1
 486:	fd cf       	rjmp	.-6      	; 0x482 <timer0DelayMs+0x7a>
			TIFR |= (1 << 1);
 488:	28 b7       	in	r18, 0x38	; 56
 48a:	22 60       	ori	r18, 0x02	; 2
 48c:	28 bf       	out	0x38, r18	; 56
	}
	else
	{
		OCR0 = Number_of_tick_per_ms-1;
		timer0Start();
		for(index=0;index<u16_delay_in_ms;index++){
 48e:	01 96       	adiw	r24, 0x01	; 1
 490:	a1 1d       	adc	r26, r1
 492:	b1 1d       	adc	r27, r1
 494:	88 15       	cp	r24, r8
 496:	99 05       	cpc	r25, r9
 498:	aa 05       	cpc	r26, r10
 49a:	bb 05       	cpc	r27, r11
 49c:	90 f3       	brcs	.-28     	; 0x482 <timer0DelayMs+0x7a>
			while(!(TIFR & (1 << 1)));
			TIFR |= (1 << 1);
		}
		timer0Stop();		
 49e:	0e 94 02 02 	call	0x404	; 0x404 <timer0Stop>




	
}
 4a2:	ff 90       	pop	r15
 4a4:	ef 90       	pop	r14
 4a6:	df 90       	pop	r13
 4a8:	cf 90       	pop	r12
 4aa:	bf 90       	pop	r11
 4ac:	af 90       	pop	r10
 4ae:	9f 90       	pop	r9
 4b0:	8f 90       	pop	r8
 4b2:	08 95       	ret

000004b4 <USART_init>:
}
*/


void USART_init(USART_Config * UART_config)
{
 4b4:	fc 01       	movw	r30, r24
	uint8_t UCSRC_URSEL_Value= 128;
	
	UCSRA.B.U2X1 = UART_config->Speed;
 4b6:	84 81       	ldd	r24, Z+4	; 0x04
 4b8:	80 fd       	sbrc	r24, 0
 4ba:	59 9a       	sbi	0x0b, 1	; 11
 4bc:	80 ff       	sbrs	r24, 0
 4be:	59 98       	cbi	0x0b, 1	; 11
	UCSRB.UCSRB_ST.TXEN1 = UART_config->Tx_enable;
 4c0:	82 81       	ldd	r24, Z+2	; 0x02
 4c2:	80 fd       	sbrc	r24, 0
 4c4:	53 9a       	sbi	0x0a, 3	; 10
 4c6:	80 ff       	sbrs	r24, 0
 4c8:	53 98       	cbi	0x0a, 3	; 10
	UCSRB.UCSRB_ST.RXEN1 = UART_config->Rx_enable;
 4ca:	83 81       	ldd	r24, Z+3	; 0x03
 4cc:	80 fd       	sbrc	r24, 0
 4ce:	54 9a       	sbi	0x0a, 4	; 10
 4d0:	80 ff       	sbrs	r24, 0
 4d2:	54 98       	cbi	0x0a, 4	; 10
	
	UCSRC.UCSRC_B = UCSRC_URSEL_Value|(UART_config->Parity)|(UART_config->Stop)|(UART_config->Mode)|(UART_config->DataSize); 
 4d4:	96 81       	ldd	r25, Z+6	; 0x06
 4d6:	87 81       	ldd	r24, Z+7	; 0x07
 4d8:	89 2b       	or	r24, r25
 4da:	80 68       	ori	r24, 0x80	; 128
 4dc:	90 85       	ldd	r25, Z+8	; 0x08
 4de:	89 2b       	or	r24, r25
 4e0:	95 81       	ldd	r25, Z+5	; 0x05
 4e2:	89 2b       	or	r24, r25
 4e4:	80 bd       	out	0x20, r24	; 32
	
	UBRRH = BAUD_PRESCALE>>8;
 4e6:	10 bc       	out	0x20, r1	; 32
	UBRRL = BAUD_PRESCALE;
 4e8:	87 e6       	ldi	r24, 0x67	; 103
 4ea:	89 b9       	out	0x09, r24	; 9
 4ec:	08 95       	ret

000004ee <UART_sendByte>:

void UART_sendByte(const uint8_t data)
{
	/* UDRE flag is set when the Tx buffer (UDR) is empty and ready for 
	 * transmitting a new byte so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA.UCSRA_B,UDRE)){}
 4ee:	5d 9b       	sbis	0x0b, 5	; 11
 4f0:	fe cf       	rjmp	.-4      	; 0x4ee <UART_sendByte>
	/* Put the required data in the UDR register and it also clear the UDRE flag as 
	 * the UDR register is not empty now */	 
	UDR = data;
 4f2:	8c b9       	out	0x0c, r24	; 12
 4f4:	08 95       	ret

000004f6 <__divmodhi4>:
 4f6:	97 fb       	bst	r25, 7
 4f8:	07 2e       	mov	r0, r23
 4fa:	16 f4       	brtc	.+4      	; 0x500 <__divmodhi4+0xa>
 4fc:	00 94       	com	r0
 4fe:	07 d0       	rcall	.+14     	; 0x50e <__divmodhi4_neg1>
 500:	77 fd       	sbrc	r23, 7
 502:	09 d0       	rcall	.+18     	; 0x516 <__divmodhi4_neg2>
 504:	0e 94 8f 02 	call	0x51e	; 0x51e <__udivmodhi4>
 508:	07 fc       	sbrc	r0, 7
 50a:	05 d0       	rcall	.+10     	; 0x516 <__divmodhi4_neg2>
 50c:	3e f4       	brtc	.+14     	; 0x51c <__divmodhi4_exit>

0000050e <__divmodhi4_neg1>:
 50e:	90 95       	com	r25
 510:	81 95       	neg	r24
 512:	9f 4f       	sbci	r25, 0xFF	; 255
 514:	08 95       	ret

00000516 <__divmodhi4_neg2>:
 516:	70 95       	com	r23
 518:	61 95       	neg	r22
 51a:	7f 4f       	sbci	r23, 0xFF	; 255

0000051c <__divmodhi4_exit>:
 51c:	08 95       	ret

0000051e <__udivmodhi4>:
 51e:	aa 1b       	sub	r26, r26
 520:	bb 1b       	sub	r27, r27
 522:	51 e1       	ldi	r21, 0x11	; 17
 524:	07 c0       	rjmp	.+14     	; 0x534 <__udivmodhi4_ep>

00000526 <__udivmodhi4_loop>:
 526:	aa 1f       	adc	r26, r26
 528:	bb 1f       	adc	r27, r27
 52a:	a6 17       	cp	r26, r22
 52c:	b7 07       	cpc	r27, r23
 52e:	10 f0       	brcs	.+4      	; 0x534 <__udivmodhi4_ep>
 530:	a6 1b       	sub	r26, r22
 532:	b7 0b       	sbc	r27, r23

00000534 <__udivmodhi4_ep>:
 534:	88 1f       	adc	r24, r24
 536:	99 1f       	adc	r25, r25
 538:	5a 95       	dec	r21
 53a:	a9 f7       	brne	.-22     	; 0x526 <__udivmodhi4_loop>
 53c:	80 95       	com	r24
 53e:	90 95       	com	r25
 540:	bc 01       	movw	r22, r24
 542:	cd 01       	movw	r24, r26
 544:	08 95       	ret

00000546 <_exit>:
 546:	f8 94       	cli

00000548 <__stop_program>:
 548:	ff cf       	rjmp	.-2      	; 0x548 <__stop_program>
